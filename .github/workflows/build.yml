# This is a basic workflow to help you get started with Actions

name: build-it

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh -command ". 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\Launch-VsDevShell.ps1' -Arch amd64; . '{0}'"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
         repository: microsoft/winget-cli
      - name: Enable Vcpkg Install
        run: |
            Set-Location $Env:VCPKG_INSTALLATION_ROOT
            .\vcpkg.exe integrate install
      - name: Write a release note!
        run: '"This is a automated build of winget, from commit [$(git rev-parse HEAD)](https://github.com/microsoft/winget-cli/tree/$(git rev-parse HEAD)). Unzip wingetdev.zip to use it!" > release.txt'
      - name: Restore it!
        run: |
          msbuild.exe -t:restore -m -p:RestorePackagesConfig=true -p:Configuration=Release src\AppInstallerCLI.sln
      - name: Build it!
        run: |
          msbuild.exe -m -p:Configuration=Release -p:Platform=x64 src\AppInstallerCLI.sln
      - name: Make that archive!
        run: |
          Copy-Item src\x64\Release\WindowsPackageManager\WindowsPackageManager.dll src\x64\Release\AppInstallerCLI\WindowsPackageManager.dll
          Move-Item src\x64\Release\AppInstallerCLI\winget.exe src\x64\Release\AppInstallerCLI\wingetdev.exe
          Compress-Archive src\x64\Release\AppInstallerCLI\ .\wingetdev.zip
      - name: Delete that old release!
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const { owner, repo } = context.repo
            const { data: { id } } = await github.rest.repos.getLatestRelease({ owner, repo })
            await github.rest.repos.deleteRelease({ owner, repo, release_id: id })
      - name: Create that new release!
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh release create ${{ github.run_number }} -t "wingetdev: ${{ github.run_number }}" -F release.txt -R damnkiwi6120/winget-build
      - name: Post the artifact to the release
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run:
          gh release upload ${{ github.run_number }} wingetdev.zip -R damnkiwi6120/winget-build
