# This is a basic workflow to help you get started with Actions

name: build-it

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      commit:
        description: 'Branch / Tag / Commit:'
        required: false
        type: string
  schedule:
    - cron: 0 0 * * *

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
         repository: microsoft/winget-cli
         ref: ${{ inputs.commit }}
      - name: Enable Vcpkg Install
        shell: cmd
        run: |
            "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 &&^
            cd %VCPKG_INSTALLATION_ROOT% &&^
            vcpkg.exe integrate install
      - name: Write a release note!
        run: '"This is a automated build of winget, from commit [$(git rev-parse HEAD)](https://github.com/microsoft/winget-cli/tree/$(git rev-parse HEAD)). Unzip wingetdev.zip to use it!" > release.txt'
      - name: Restore it!
        shell: cmd
        run: |
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 &&^
          msbuild -t:restore -m -p:RestorePackagesConfig=true -p:Configuration=Release src\AppInstallerCLI.sln
      - name: Build it!
        shell: cmd
        run: |
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64 &&^
          msbuild -m -p:Configuration=Release -p:Platform=x64 src\AppInstallerCLI.sln
      - name: Make that archive!
        run: |
          Copy-Item src\x64\Release\WindowsPackageManager\WindowsPackageManager.dll src\x64\Release\AppInstallerCLI\WindowsPackageManager.dll
          Move-Item src\x64\Release\AppInstallerCLI\winget.exe src\x64\Release\AppInstallerCLI\wingetdev.exe
          Compress-Archive src\x64\Release\AppInstallerCLI\ .\wingetdev.zip
      - name: Create that new release!
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          $ReleaseList = Invoke-RestMethod -Uri 'https://api.github.com/repos/microsoft/winget-cli/releases' -HttpVersion 3.0
          $TagName = $ReleaseList[0].tag_name
          $null = $TagName -match 'v1\.(?<Minor>\d{1,})\.(?<Build>\d{1,})'
          $Minor = [Int64]$Matches.Minor
          $Build = [Int64]$Matches.Build
          $Prerelease = $ReleaseList[0].prerelease
          for ($i = 1; $i -lt $ReleaseList.Length; $i++ ) {
          	if ($Prerelease -ne $ReleaseList[$i].prerelease) {
          		$null = $ReleaseList[$i].tag_name -match 'v1\.(?<Minor>\d{1,})\.(?<Build>\d{1,})'
          		if ($Minor -gt [Int64]$Matches.Minor) {
          			Break
          		}
          		elseif ($Minor -eq [Int64]$Matches.Minor) {
          			if ($Build -lt [Int64]$Matches.Build) {
          				$Build = [Int64]$Matches.Build
                  $TagName = $ReleaseList[$i].tag_name
          			}
          			Break
          		}
          		else {
          			$Minor = [Int64]$Matches.Minor
          			$Build = [Int64]$Matches.Build
                $TagName = $ReleaseList[$i].tag_name
          			Break
          		}
          	}
          }
          Write-Output "TagName=$TagName" >> $GITHUB_ENV
          gh release create "$TagName+$(git rev-parse --short=7 HEAD)" -t "$TagName+$(git rev-parse HEAD)" -F release.txt -R ${{ github.repository }}
      - name: Post the artifact to the release
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run:
          gh release upload "$TagName+$(git rev-parse --short=7 HEAD)" wingetdev.zip -R ${{ github.repository }}
